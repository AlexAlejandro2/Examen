import os
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Seria definir la ruta donde tengo todas las imagenes
DATA_DIR = 'C:\\Users\\aa194\\Downloads\\Examen'  

# Redimenciona las imágenes 
IMG_SIZE = (64, 64) 
data = []  
labels = []  

# Son las carpetas que hay (CarreteraLimpia, CarreteraNieve, CarreteraBaches)
for label, folder in enumerate(['CarreteraLimpia', 'CarreteraNieve', 'CarreteraBaches']):
    class_dir = os.path.join(DATA_DIR, folder)  
    for img_name in os.listdir(class_dir):  
        img_path = os.path.join(class_dir, img_name)  
        img = cv2.imread(img_path)  # lee la imagen
        if img is not None:  
            img = cv2.resize(img, IMG_SIZE)
            img = img / 255.0  
            data.append(img)  
            labels.append(label)  # Etiquetaremos las imagenes (0=limpia, 1=nieve, 2=baches)

data = np.array(data)  # Convertir imágenes a un array
labels = np.array(labels)  # Convertir etiquetas a un array

datagen = ImageDataGenerator(
    rotation_range=20,        # Rotaciones aleatorias de hasta 20 grados
    width_shift_range=0.2,    # Desplazamientos horizontales aleatorios
    height_shift_range=0.2,   # Desplazamientos verticales aleatorios
    shear_range=0.2,          # Transformaciones de cizalladura
    zoom_range=0.2,           # Zoom aleatorio
    horizontal_flip=True,     
    fill_mode='nearest'       
# Opte por esto ya que como yo cree el dataset desde 0 y tenia pocas imágenes, para que se aumentaran las opciones 
)

datagen.fit(data)

# Creamos el modelo neuronal
model = models.Sequential([
    layers.InputLayer(input_shape=(64, 64, 3)),  
    layers.Conv2D(32, (3, 3), activation='relu'),  ¿
    layers.MaxPooling2D((2, 2)),  
    layers.Conv2D(64, (3, 3), activation='relu'),  
    layers.MaxPooling2D((2, 2)),  
    layers.Flatten(),  
    layers.Dense(64, activation='relu'),  
    layers.Dense(3, activation='softmax')  
])

# copilamos el modelo
model.compile(optimizer='adam',  
              loss='sparse_categorical_crossentropy',  
              metrics=['accuracy'])  
model.fit(datagen.flow(data, labels, batch_size=32), epochs=10)  # Entrenar por 10 épocas

# Guardamos el modelo
model.save('carreteras.h5')  

print("Modelo entrenado y guardado como 'carreteras.h5'.")
